// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package transferdbgen

import (
	"context"
	"time"

	"github.com/shopspring/decimal"
)

const createTransaction = `-- name: CreateTransaction :exec
INSERT INTO transactions (account_id, amount, created_date)
VALUES ($1, $2, $3)
`

type CreateTransactionParams struct {
	AccountID   int64           `json:"accountId"`
	Amount      decimal.Decimal `json:"amount"`
	CreatedDate time.Time       `json:"createdDate"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) error {
	_, err := q.db.Exec(ctx, createTransaction, arg.AccountID, arg.Amount, arg.CreatedDate)
	return err
}

const getBalance = `-- name: GetBalance :one
SELECT COALESCE(SUM(amount), 0)::NUMERIC AS balance 
FROM transactions WHERE account_id = $1
`

func (q *Queries) GetBalance(ctx context.Context, accountID int64) (decimal.Decimal, error) {
	row := q.db.QueryRow(ctx, getBalance, accountID)
	var balance decimal.Decimal
	err := row.Scan(&balance)
	return balance, err
}
