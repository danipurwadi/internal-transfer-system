// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	web "github.com/danipurwadi/internal-transfer-system/foundation/web"
	mock "github.com/stretchr/testify/mock"
)

// MidHandler is an autogenerated mock type for the MidHandler type
type MidHandler struct {
	mock.Mock
}

type MidHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MidHandler) EXPECT() *MidHandler_Expecter {
	return &MidHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MidHandler) Execute(_a0 web.Handler) web.Handler {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 web.Handler
	if rf, ok := ret.Get(0).(func(web.Handler) web.Handler); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(web.Handler)
		}
	}

	return r0
}

// MidHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MidHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 web.Handler
func (_e *MidHandler_Expecter) Execute(_a0 interface{}) *MidHandler_Execute_Call {
	return &MidHandler_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MidHandler_Execute_Call) Run(run func(_a0 web.Handler)) *MidHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(web.Handler))
	})
	return _c
}

func (_c *MidHandler_Execute_Call) Return(_a0 web.Handler) *MidHandler_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MidHandler_Execute_Call) RunAndReturn(run func(web.Handler) web.Handler) *MidHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMidHandler creates a new instance of MidHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMidHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MidHandler {
	mock := &MidHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
