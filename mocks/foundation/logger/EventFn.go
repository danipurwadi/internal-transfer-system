// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	logger "github.com/danipurwadi/internal-transfer-system/foundation/logger"
	mock "github.com/stretchr/testify/mock"
)

// EventFn is an autogenerated mock type for the EventFn type
type EventFn struct {
	mock.Mock
}

type EventFn_Expecter struct {
	mock *mock.Mock
}

func (_m *EventFn) EXPECT() *EventFn_Expecter {
	return &EventFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, r
func (_m *EventFn) Execute(ctx context.Context, r logger.Record) {
	_m.Called(ctx, r)
}

// EventFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type EventFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - r logger.Record
func (_e *EventFn_Expecter) Execute(ctx interface{}, r interface{}) *EventFn_Execute_Call {
	return &EventFn_Execute_Call{Call: _e.mock.On("Execute", ctx, r)}
}

func (_c *EventFn_Execute_Call) Run(run func(ctx context.Context, r logger.Record)) *EventFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(logger.Record))
	})
	return _c
}

func (_c *EventFn_Execute_Call) Return() *EventFn_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventFn_Execute_Call) RunAndReturn(run func(context.Context, logger.Record)) *EventFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventFn creates a new instance of EventFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventFn {
	mock := &EventFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
