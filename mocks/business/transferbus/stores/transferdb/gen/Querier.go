// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	decimal "github.com/shopspring/decimal"
	mock "github.com/stretchr/testify/mock"

	pgconn "github.com/jackc/pgx/v5/pgconn"

	transferdbgen "github.com/danipurwadi/internal-transfer-system/business/transferbus/stores/transferdb/gen"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

type Querier_Expecter struct {
	mock *mock.Mock
}

func (_m *Querier) EXPECT() *Querier_Expecter {
	return &Querier_Expecter{mock: &_m.Mock}
}

// CreateAccount provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateAccount(ctx context.Context, arg transferdbgen.CreateAccountParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transferdbgen.CreateAccountParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_CreateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccount'
type Querier_CreateAccount_Call struct {
	*mock.Call
}

// CreateAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - arg transferdbgen.CreateAccountParams
func (_e *Querier_Expecter) CreateAccount(ctx interface{}, arg interface{}) *Querier_CreateAccount_Call {
	return &Querier_CreateAccount_Call{Call: _e.mock.On("CreateAccount", ctx, arg)}
}

func (_c *Querier_CreateAccount_Call) Run(run func(ctx context.Context, arg transferdbgen.CreateAccountParams)) *Querier_CreateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transferdbgen.CreateAccountParams))
	})
	return _c
}

func (_c *Querier_CreateAccount_Call) Return(_a0 error) *Querier_CreateAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_CreateAccount_Call) RunAndReturn(run func(context.Context, transferdbgen.CreateAccountParams) error) *Querier_CreateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTransaction provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateTransaction(ctx context.Context, arg transferdbgen.CreateTransactionParams) error {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, transferdbgen.CreateTransactionParams) error); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Querier_CreateTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTransaction'
type Querier_CreateTransaction_Call struct {
	*mock.Call
}

// CreateTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - arg transferdbgen.CreateTransactionParams
func (_e *Querier_Expecter) CreateTransaction(ctx interface{}, arg interface{}) *Querier_CreateTransaction_Call {
	return &Querier_CreateTransaction_Call{Call: _e.mock.On("CreateTransaction", ctx, arg)}
}

func (_c *Querier_CreateTransaction_Call) Run(run func(ctx context.Context, arg transferdbgen.CreateTransactionParams)) *Querier_CreateTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transferdbgen.CreateTransactionParams))
	})
	return _c
}

func (_c *Querier_CreateTransaction_Call) Return(_a0 error) *Querier_CreateTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Querier_CreateTransaction_Call) RunAndReturn(run func(context.Context, transferdbgen.CreateTransactionParams) error) *Querier_CreateTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// CreditAccount provides a mock function with given fields: ctx, arg
func (_m *Querier) CreditAccount(ctx context.Context, arg transferdbgen.CreditAccountParams) (pgconn.CommandTag, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for CreditAccount")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, transferdbgen.CreditAccountParams) (pgconn.CommandTag, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, transferdbgen.CreditAccountParams) pgconn.CommandTag); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, transferdbgen.CreditAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_CreditAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreditAccount'
type Querier_CreditAccount_Call struct {
	*mock.Call
}

// CreditAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - arg transferdbgen.CreditAccountParams
func (_e *Querier_Expecter) CreditAccount(ctx interface{}, arg interface{}) *Querier_CreditAccount_Call {
	return &Querier_CreditAccount_Call{Call: _e.mock.On("CreditAccount", ctx, arg)}
}

func (_c *Querier_CreditAccount_Call) Run(run func(ctx context.Context, arg transferdbgen.CreditAccountParams)) *Querier_CreditAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transferdbgen.CreditAccountParams))
	})
	return _c
}

func (_c *Querier_CreditAccount_Call) Return(_a0 pgconn.CommandTag, _a1 error) *Querier_CreditAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_CreditAccount_Call) RunAndReturn(run func(context.Context, transferdbgen.CreditAccountParams) (pgconn.CommandTag, error)) *Querier_CreditAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DebitAccount provides a mock function with given fields: ctx, arg
func (_m *Querier) DebitAccount(ctx context.Context, arg transferdbgen.DebitAccountParams) (pgconn.CommandTag, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for DebitAccount")
	}

	var r0 pgconn.CommandTag
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, transferdbgen.DebitAccountParams) (pgconn.CommandTag, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, transferdbgen.DebitAccountParams) pgconn.CommandTag); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(pgconn.CommandTag)
	}

	if rf, ok := ret.Get(1).(func(context.Context, transferdbgen.DebitAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_DebitAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DebitAccount'
type Querier_DebitAccount_Call struct {
	*mock.Call
}

// DebitAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - arg transferdbgen.DebitAccountParams
func (_e *Querier_Expecter) DebitAccount(ctx interface{}, arg interface{}) *Querier_DebitAccount_Call {
	return &Querier_DebitAccount_Call{Call: _e.mock.On("DebitAccount", ctx, arg)}
}

func (_c *Querier_DebitAccount_Call) Run(run func(ctx context.Context, arg transferdbgen.DebitAccountParams)) *Querier_DebitAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(transferdbgen.DebitAccountParams))
	})
	return _c
}

func (_c *Querier_DebitAccount_Call) Return(_a0 pgconn.CommandTag, _a1 error) *Querier_DebitAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_DebitAccount_Call) RunAndReturn(run func(context.Context, transferdbgen.DebitAccountParams) (pgconn.CommandTag, error)) *Querier_DebitAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, accountID
func (_m *Querier) GetAccount(ctx context.Context, accountID int64) (transferdbgen.Account, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 transferdbgen.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (transferdbgen.Account, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) transferdbgen.Account); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Get(0).(transferdbgen.Account)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type Querier_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
func (_e *Querier_Expecter) GetAccount(ctx interface{}, accountID interface{}) *Querier_GetAccount_Call {
	return &Querier_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, accountID)}
}

func (_c *Querier_GetAccount_Call) Run(run func(ctx context.Context, accountID int64)) *Querier_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetAccount_Call) Return(_a0 transferdbgen.Account, _a1 error) *Querier_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAccount_Call) RunAndReturn(run func(context.Context, int64) (transferdbgen.Account, error)) *Querier_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccounts provides a mock function with given fields: ctx, accountIds
func (_m *Querier) GetAccounts(ctx context.Context, accountIds []int64) ([]transferdbgen.Account, error) {
	ret := _m.Called(ctx, accountIds)

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 []transferdbgen.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []int64) ([]transferdbgen.Account, error)); ok {
		return rf(ctx, accountIds)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []int64) []transferdbgen.Account); ok {
		r0 = rf(ctx, accountIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transferdbgen.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []int64) error); ok {
		r1 = rf(ctx, accountIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccounts'
type Querier_GetAccounts_Call struct {
	*mock.Call
}

// GetAccounts is a helper method to define mock.On call
//   - ctx context.Context
//   - accountIds []int64
func (_e *Querier_Expecter) GetAccounts(ctx interface{}, accountIds interface{}) *Querier_GetAccounts_Call {
	return &Querier_GetAccounts_Call{Call: _e.mock.On("GetAccounts", ctx, accountIds)}
}

func (_c *Querier_GetAccounts_Call) Run(run func(ctx context.Context, accountIds []int64)) *Querier_GetAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]int64))
	})
	return _c
}

func (_c *Querier_GetAccounts_Call) Return(_a0 []transferdbgen.Account, _a1 error) *Querier_GetAccounts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetAccounts_Call) RunAndReturn(run func(context.Context, []int64) ([]transferdbgen.Account, error)) *Querier_GetAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetBalance provides a mock function with given fields: ctx, accountID
func (_m *Querier) GetBalance(ctx context.Context, accountID int64) (decimal.Decimal, error) {
	ret := _m.Called(ctx, accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetBalance")
	}

	var r0 decimal.Decimal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (decimal.Decimal, error)); ok {
		return rf(ctx, accountID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) decimal.Decimal); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Get(0).(decimal.Decimal)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Querier_GetBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBalance'
type Querier_GetBalance_Call struct {
	*mock.Call
}

// GetBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID int64
func (_e *Querier_Expecter) GetBalance(ctx interface{}, accountID interface{}) *Querier_GetBalance_Call {
	return &Querier_GetBalance_Call{Call: _e.mock.On("GetBalance", ctx, accountID)}
}

func (_c *Querier_GetBalance_Call) Run(run func(ctx context.Context, accountID int64)) *Querier_GetBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *Querier_GetBalance_Call) Return(_a0 decimal.Decimal, _a1 error) *Querier_GetBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Querier_GetBalance_Call) RunAndReturn(run func(context.Context, int64) (decimal.Decimal, error)) *Querier_GetBalance_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuerier creates a new instance of Querier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuerier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Querier {
	mock := &Querier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
